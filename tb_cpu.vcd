$date
	Tue Sep  2 23:16:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cpu $end
$var wire 32 ! imm_out [31:0] $end
$var wire 1 " branch $end
$var wire 1 # alu_zero $end
$var wire 32 $ alu_result [31:0] $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$scope module uut $end
$var wire 1 % clk $end
$var wire 32 ' pc_jalr [31:0] $end
$var wire 1 & reset $end
$var wire 1 ( take_branch $end
$var wire 32 ) write_data [31:0] $end
$var wire 5 * rs2 [4:0] $end
$var wire 5 + rs1 [4:0] $end
$var wire 1 , reg_write $end
$var wire 32 - rd2 [31:0] $end
$var wire 32 . rd1 [31:0] $end
$var wire 5 / rd [4:0] $end
$var wire 32 0 pc_plus_4 [31:0] $end
$var wire 32 1 pc_out [31:0] $end
$var wire 32 2 pc_branch [31:0] $end
$var wire 7 3 opcode [6:0] $end
$var wire 32 4 next_pc [31:0] $end
$var wire 1 5 mem_write $end
$var wire 1 6 mem_to_reg $end
$var wire 1 7 mem_read $end
$var wire 1 8 lui $end
$var wire 1 9 jump $end
$var wire 32 : instr [31:0] $end
$var wire 32 ; imm_out [31:0] $end
$var wire 7 < funct7 [6:0] $end
$var wire 3 = funct3 [2:0] $end
$var wire 32 > data_read [31:0] $end
$var wire 1 " branch $end
$var wire 1 ? auipc $end
$var wire 1 # alu_zero $end
$var wire 1 @ alu_src $end
$var wire 4 A alu_sel [3:0] $end
$var wire 32 B alu_result [31:0] $end
$var wire 2 C alu_op [1:0] $end
$var wire 32 D alu_b [31:0] $end
$scope module alu_ctrl_inst $end
$var wire 3 E funct3 [2:0] $end
$var wire 1 F funct7b5 $end
$var wire 2 G alu_op [1:0] $end
$var parameter 4 H ALU_ADD $end
$var parameter 4 I ALU_AND $end
$var parameter 4 J ALU_OR $end
$var parameter 4 K ALU_SLL $end
$var parameter 4 L ALU_SLT $end
$var parameter 4 M ALU_SLTU $end
$var parameter 4 N ALU_SRA $end
$var parameter 4 O ALU_SRL $end
$var parameter 4 P ALU_SUB $end
$var parameter 4 Q ALU_XOR $end
$var reg 4 R alu_sel [3:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 4 S alu_sel [3:0] $end
$var wire 32 T b [31:0] $end
$var wire 1 # zero $end
$var wire 32 U a [31:0] $end
$var parameter 4 V ALU_ADD $end
$var parameter 4 W ALU_AND $end
$var parameter 4 X ALU_OR $end
$var parameter 4 Y ALU_SLL $end
$var parameter 4 Z ALU_SLT $end
$var parameter 4 [ ALU_SLTU $end
$var parameter 4 \ ALU_SRA $end
$var parameter 4 ] ALU_SRL $end
$var parameter 4 ^ ALU_SUB $end
$var parameter 4 _ ALU_XOR $end
$var reg 32 ` result [31:0] $end
$upscope $end
$scope module control_inst $end
$var wire 7 a opcode [6:0] $end
$var reg 2 b alu_op [1:0] $end
$var reg 1 @ alu_src $end
$var reg 1 ? auipc $end
$var reg 1 " branch $end
$var reg 1 9 jump $end
$var reg 1 8 lui $end
$var reg 1 7 mem_read $end
$var reg 1 6 mem_to_reg $end
$var reg 1 5 mem_write $end
$var reg 1 , reg_write $end
$upscope $end
$scope module dmem_inst $end
$var wire 32 c addr [31:0] $end
$var wire 1 % clk $end
$var wire 1 7 mem_read $end
$var wire 1 5 mem_write $end
$var wire 32 d write_data [31:0] $end
$var reg 32 e read_data [31:0] $end
$upscope $end
$scope module imem_inst $end
$var wire 32 f instr [31:0] $end
$var wire 32 g addr [31:0] $end
$upscope $end
$scope module imm_inst $end
$var wire 32 h instr [31:0] $end
$var wire 7 i opcode [6:0] $end
$var reg 32 j imm_out [31:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 % clk $end
$var wire 32 k next_pc [31:0] $end
$var wire 1 & reset $end
$var reg 32 l pc_out [31:0] $end
$upscope $end
$scope module rf_inst $end
$var wire 1 % clk $end
$var wire 5 m rd [4:0] $end
$var wire 5 n rs1 [4:0] $end
$var wire 5 o rs2 [4:0] $end
$var wire 32 p wd [31:0] $end
$var wire 1 , we $end
$var wire 32 q rd2 [31:0] $end
$var wire 32 r rd1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 _
b1 ^
b1000 ]
b1001 \
b110 [
b101 Z
b111 Y
b11 X
b10 W
b0 V
b100 Q
b1 P
b1000 O
b1001 N
b110 M
b101 L
b111 K
b11 J
b10 I
b0 H
$end
#0
$dumpvars
b0 r
bx q
b101 p
b101 o
b0 n
b1 m
b0 l
b100 k
b101 j
b10011 i
b10100000000000010010011 h
b0 g
b10100000000000010010011 f
b0 e
bx d
b101 c
b10 b
b10011 a
b101 `
b0 U
b101 T
b0 S
b0 R
b10 G
0F
b0 E
b101 D
b10 C
b101 B
b0 A
1@
0?
b0 >
b0 =
b0 <
b101 ;
b10100000000000010010011 :
09
08
07
06
05
b100 4
b10011 3
b101 2
b0 1
b100 0
b1 /
b0 .
bx -
1,
b0 +
b101 *
b101 )
0(
b100 '
1&
0%
b101 $
0#
0"
b101 !
$end
#5000
1%
#10000
0%
0&
#15000
b1000 )
b1000 p
x#
bx $
bx B
bx `
bx c
b1000 '
bx D
bx T
19
b0 C
b0 G
b0 b
0@
1,
b1000 !
b1000 ;
b1000 j
b1101111 i
b1000 *
b1000 o
b101 /
b101 m
b1101111 3
b1101111 a
b1100 4
b1100 k
b100000000000001011101111 :
b100000000000001011101111 f
b100000000000001011101111 h
b1100 2
b1000 0
b100 1
b100 g
b100 l
1%
#20000
0%
#25000
0#
b1100 $
b1100 B
b1100 `
b1100 c
b111 D
b111 T
b1100 '
b101 .
b101 U
b101 r
b10 C
b10 G
b10 b
1@
09
1,
b1100 )
b1100 p
b111 !
b111 ;
b111 j
b10011 i
b111 *
b111 o
b1 +
b1 n
b10 /
b10 m
b10011 3
b10011 a
b10000 4
b10000 k
b11100001000000100010011 :
b11100001000000100010011 f
b11100001000000100010011 h
b10011 2
b10000 0
b1100 1
b1100 g
b1100 l
1%
#30000
0%
#35000
b10100 )
b10100 p
b1000 $
b1000 B
b1000 `
b1000 c
b1000 '
b0 D
b0 T
b0 -
b0 d
b0 q
b1000 .
b1000 U
b1000 r
19
b0 C
b0 G
b0 b
1@
1,
b0 !
b0 ;
b0 j
b1100111 i
b0 *
b0 o
b101 +
b101 n
b0 /
b0 m
b1100111 3
b1100111 a
b1000 4
b1000 k
b101000000001100111 :
b101000000001100111 f
b101000000001100111 h
b10000 2
b10100 0
b10000 1
b10000 g
b10000 l
1%
#40000
0%
#45000
b0 '
1#
b0 $
b0 B
b0 `
b0 c
b1100 4
b1100 k
b0 .
b0 U
b0 r
09
0@
0,
b0 )
b0 p
b1110011 i
b0 +
b0 n
b1110011 3
b1110011 a
b1110011 :
b1110011 f
b1110011 h
b1000 2
b1100 0
b1000 1
b1000 g
b1000 l
1%
#50000
0%
#55000
b1100 )
b1100 p
0#
b1100 $
b1100 B
b1100 `
b1100 c
b111 D
b111 T
b1100 '
bx -
bx d
bx q
b101 .
b101 U
b101 r
b10 C
b10 G
b10 b
1@
1,
b111 !
b111 ;
b111 j
b10011 i
b111 *
b111 o
b1 +
b1 n
b10 /
b10 m
b10011 3
b10011 a
b10000 4
b10000 k
b11100001000000100010011 :
b11100001000000100010011 f
b11100001000000100010011 h
b10011 2
b10000 0
b1100 1
b1100 g
b1100 l
1%
#60000
0%
#65000
b10100 )
b10100 p
b1000 $
b1000 B
b1000 `
b1000 c
b1000 '
b0 D
b0 T
b0 -
b0 d
b0 q
b1000 .
b1000 U
b1000 r
19
b0 C
b0 G
b0 b
1@
1,
b0 !
b0 ;
b0 j
b1100111 i
b0 *
b0 o
b101 +
b101 n
b0 /
b0 m
b1100111 3
b1100111 a
b1000 4
b1000 k
b101000000001100111 :
b101000000001100111 f
b101000000001100111 h
b10000 2
b10100 0
b10000 1
b10000 g
b10000 l
1%
#70000
0%
#75000
b0 '
1#
b0 $
b0 B
b0 `
b0 c
b1100 4
b1100 k
b0 .
b0 U
b0 r
09
0@
0,
b0 )
b0 p
b1110011 i
b0 +
b0 n
b1110011 3
b1110011 a
b1110011 :
b1110011 f
b1110011 h
b1000 2
b1100 0
b1000 1
b1000 g
b1000 l
1%
#80000
0%
#85000
b1100 )
b1100 p
0#
b1100 $
b1100 B
b1100 `
b1100 c
b111 D
b111 T
b1100 '
bx -
bx d
bx q
b101 .
b101 U
b101 r
b10 C
b10 G
b10 b
1@
1,
b111 !
b111 ;
b111 j
b10011 i
b111 *
b111 o
b1 +
b1 n
b10 /
b10 m
b10011 3
b10011 a
b10000 4
b10000 k
b11100001000000100010011 :
b11100001000000100010011 f
b11100001000000100010011 h
b10011 2
b10000 0
b1100 1
b1100 g
b1100 l
1%
#90000
0%
#95000
b10100 )
b10100 p
b1000 $
b1000 B
b1000 `
b1000 c
b1000 '
b0 D
b0 T
b0 -
b0 d
b0 q
b1000 .
b1000 U
b1000 r
19
b0 C
b0 G
b0 b
1@
1,
b0 !
b0 ;
b0 j
b1100111 i
b0 *
b0 o
b101 +
b101 n
b0 /
b0 m
b1100111 3
b1100111 a
b1000 4
b1000 k
b101000000001100111 :
b101000000001100111 f
b101000000001100111 h
b10000 2
b10100 0
b10000 1
b10000 g
b10000 l
1%
#100000
0%
#105000
b0 '
1#
b0 $
b0 B
b0 `
b0 c
b1100 4
b1100 k
b0 .
b0 U
b0 r
09
0@
0,
b0 )
b0 p
b1110011 i
b0 +
b0 n
b1110011 3
b1110011 a
b1110011 :
b1110011 f
b1110011 h
b1000 2
b1100 0
b1000 1
b1000 g
b1000 l
1%
#110000
0%
